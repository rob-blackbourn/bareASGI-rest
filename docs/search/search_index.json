{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome This package provides enhanced support for writing REST APIs with bareASGI . It includes: A router to simplify the creation of REST APIs, A swagger API endpoint This is a Python 3.7+ package, and is currently pre-release. Thanks Thanks to rr- and contributors for the excellent docstring-parser package.","title":"Welcome"},{"location":"#welcome","text":"This package provides enhanced support for writing REST APIs with bareASGI . It includes: A router to simplify the creation of REST APIs, A swagger API endpoint This is a Python 3.7+ package, and is currently pre-release.","title":"Welcome"},{"location":"#thanks","text":"Thanks to rr- and contributors for the excellent docstring-parser package.","title":"Thanks"},{"location":"api/bareasgi_rest/","text":"bareASGI_rest module bareasgi_rest Package: bareasgi_rest File: bareasgi_rest/ init .py Summary bareASGI-rest Description bareASGI-rest function bareasgi_rest . add_swagger_ui Module: bareasgi_rest.helpers Package: bareasgi_rest File: bareasgi_rest/helpers.py Summary Add the Swagger UI bareasgi_rest . add_swagger_ui ( app : Application ) Parameters app : Application (optional) The bareASGI application Returns Any : class RestHttpRouter ( BasicHttpRouter ) Module: bareasgi_rest Package: bareasgi_rest File: bareasgi_rest/rest_router.py Summary Initialise the REST router bareasgi_rest . RestHttpRouter ( * , title : str , version : str , description : Optional[str] , base_path : str , consumes : DictConsumes , produces : DictProduces , tags : Optional[List[Mapping[str , swagger_base_url : Optional[str] , typeface_url : Optional[str] , config : Optional[SwaggerConfig] , serializer_configs : Dict[bytes, jetblack_serialization.config.SerializerConfig] , arg_serializer_config : SerializerConfig , arg_deserializer_factory : Callable[[jetblack_serialization.config.SerializerConfigCallable[[strAnyAny]] ) Parameters * (optional) title : str (optional) The title of the swagger documentation version : str (optional) The version of the exposed API description : Optional[str] The API description. Defaults to None. base_path : str The base path of the API. Defaults to ''. consumes : DictConsumes A map of media types and deserializers. Defaults to DEFAULT_CONSUMES. produces : DictProduces A map of media types and serializers. Defaults to DEFAULT_PRODUCES. tags : Optional[List[Mapping[str The available tags. Defaults to None. swagger_base_url : Optional[str] The base url for the swagger CDN. Defaults to DEFAULT_SWAGGER_BASE_URL. typeface_url : Optional[str] The base url for the typeface. Defaults to DEFAULT_TYPEFACE_URL. config : Optional[SwaggerConfig] The swagger configuration. Defaults to None. serializer_configs : Dict[bytes, jetblack_serialization.config.SerializerConfig] arg_serializer_config : SerializerConfig arg_deserializer_factory : Callable[[jetblack_serialization.config.SerializerConfigCallable[[strAnyAny]] property RestHttpRouter . not_found_response Summary The response when a handler could not be found for a method/path not_found_response -> Union[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]] not_found_response : Union[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]] = ... method RestHttpRouter . add Module: bareasgi.basic_router.http_router Package: bareasgi.basic_router File: bareasgi/basic_router/http_router.py Summary Add a handler RestHttpRouter . add ( methods : AbstractSet[str] , path : str , callback : CallableMapping[strAnyUnionMutableMapping[strAny], NoneTypeMapping[strAnyAsyncIterable[bytesAwaitableUnion[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]]]] ) Parameters methods : AbstractSet[str] (optional) The supported HTTP methods path : str (optional) The path callback : CallableMapping[strAnyUnionMutableMapping[strAny], NoneTypeMapping[strAnyAsyncIterable[bytesAwaitableUnion[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]]]] (optional) The request handler Returns Any : method RestHttpRouter . add_rest Module: bareasgi_rest.rest_router Package: bareasgi_rest File: bareasgi_rest/rest_router.py Summary Register a callback to a method and path RestHttpRouter . add_rest ( methods : AbstractSet[str] , path : str , callback : RestCallback , * , consumes : List[bytes] , produces : List[bytes] , collection_format : str , tags : Optional[List[str]] , status_code : int , status_description : str , serializer_config : UnionDict[bytes, jetblack_serialization.config.SerializerConfig], NoneType] , arg_serializer_config : Union[jetblack_serialization.config.SerializerConfig, NoneType] , arg_deserializer_factory : UnionCallable[[jetblack_serialization.config.SerializerConfigCallable[[strAnyAny]], NoneType] ) Parameters methods : AbstractSet[str] (optional) The set of methods path : str (optional) The path callback : RestCallback (optional) The callback * (optional) consumes : List[bytes] The content media type. Defaults to b'application/json'. produces : List[bytes] The accept media type. Defaults to b'application/json'. collection_format : str The format of repeated values. Defaults to DEFAULT_COLLECTION_FORMAT. tags : Optional[List[str]] A list of tags. Defaults to None. status_code : int The ok status code. Defaults to 200. status_description : str The ok status message. Defaults to 'OK'. serializer_config : UnionDict[bytes, jetblack_serialization.config.SerializerConfig], NoneType] arg_serializer_config : Union[jetblack_serialization.config.SerializerConfig, NoneType] arg_deserializer_factory : UnionCallable[[jetblack_serialization.config.SerializerConfigCallable[[strAnyAny]], NoneType] Returns Any : method RestHttpRouter . add_route Module: bareasgi.basic_router.http_router Package: bareasgi.basic_router File: bareasgi/basic_router/http_router.py Summary Add a route to a callback for a method and path definition RestHttpRouter . add_route ( method : str , path_definition : PathDefinition , callback : CallableMapping[strAnyUnionMutableMapping[strAny], NoneTypeMapping[strAnyAsyncIterable[bytesAwaitableUnion[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]]]] ) Parameters method : str (optional) The method path_definition : PathDefinition (optional) The path definition callback : CallableMapping[strAnyUnionMutableMapping[strAny], NoneTypeMapping[strAnyAsyncIterable[bytesAwaitableUnion[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]]]] (optional) The callback Returns Any : method RestHttpRouter . resolve Module: bareasgi.basic_router.http_router Package: bareasgi.basic_router File: bareasgi/basic_router/http_router.py Summary Resolve a request to a handler with the route matches RestHttpRouter . resolve ( method : str , path : str ) Parameters method : str (optional) The HTTP method. path : str (optional) The path Returns TupleUnionCallableMapping[strAnyUnionMutableMapping[strAny], NoneTypeMapping[strAnyAsyncIterable[bytesAwaitableUnion[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]]]], NoneTypeUnionMapping[strAny], NoneType]] : A handler and the optional route matches. class SwaggerConfig Module: bareasgi_rest Package: bareasgi_rest.swagger File: bareasgi_rest/swagger/config.py Summary The Swagger UI Configuration bareasgi_rest.swagger . SwaggerConfig ( validator_url : Optional[str] , supported_submit_methods : Optional[List[str]] , display_operation_id : bool , display_request_duration : bool , doc_expansion : str , oauth2 : Optional[SwaggerOauth2Config] , serialize_key : Callable[[str], str] , deserialize_key : Callable[[str], str] ) Parameters validator_url : Optional[str] The url of the validator, defaults to None supported_submit_methods : Optional[List[str]] The supported submit methods, defaults to None display_operation_id : bool Whether operation ids should be displayed, defaults to False display_request_duration : bool Whether the duration of the request should be displayed, defaults to False doc_expansion : str How the methods should be displayed, defaults to \"list\" oauth2 : Optional[SwaggerOauth2Config] Optional oauth2 config, defaults to None serialize_key : Callable[[str], str] The function to serialize keys deserialize_key : Callable[[str], str] The function to deserialize keys class SwaggerOauth2Config Module: bareasgi_rest Package: bareasgi_rest.swagger File: bareasgi_rest/swagger/config.py Summary Swagger Oauth2 config bareasgi_rest.swagger . SwaggerOauth2Config ( realm : str , app_name : str , redirect_url : str ) Parameters realm : str (optional) The realm app_name : str (optional) The application name redirect_url : str (optional) The redirect url","title":"bareasgi_rest"},{"location":"api/bareasgi_rest/#bareasgi_rest","text":"","title":"bareASGI_rest"},{"location":"api/bareasgi_rest/#module-bareasgi_rest","text":"Package: bareasgi_rest File: bareasgi_rest/ init .py","title":"module bareasgi_rest"},{"location":"api/bareasgi_rest/#summary","text":"bareASGI-rest","title":"Summary"},{"location":"api/bareasgi_rest/#description","text":"bareASGI-rest","title":"Description"},{"location":"api/bareasgi_rest/#function-bareasgi_restadd_swagger_ui","text":"Module: bareasgi_rest.helpers Package: bareasgi_rest File: bareasgi_rest/helpers.py","title":"function bareasgi_rest.add_swagger_ui"},{"location":"api/bareasgi_rest/#summary_1","text":"Add the Swagger UI bareasgi_rest . add_swagger_ui ( app : Application )","title":"Summary"},{"location":"api/bareasgi_rest/#parameters","text":"app : Application (optional) The bareASGI application","title":"Parameters"},{"location":"api/bareasgi_rest/#returns","text":"Any :","title":"Returns"},{"location":"api/bareasgi_rest/#class-resthttprouterbasichttprouter","text":"Module: bareasgi_rest Package: bareasgi_rest File: bareasgi_rest/rest_router.py","title":"class RestHttpRouter(BasicHttpRouter)"},{"location":"api/bareasgi_rest/#summary_2","text":"Initialise the REST router bareasgi_rest . RestHttpRouter ( * , title : str , version : str , description : Optional[str] , base_path : str , consumes : DictConsumes , produces : DictProduces , tags : Optional[List[Mapping[str , swagger_base_url : Optional[str] , typeface_url : Optional[str] , config : Optional[SwaggerConfig] , serializer_configs : Dict[bytes, jetblack_serialization.config.SerializerConfig] , arg_serializer_config : SerializerConfig , arg_deserializer_factory : Callable[[jetblack_serialization.config.SerializerConfigCallable[[strAnyAny]] )","title":"Summary"},{"location":"api/bareasgi_rest/#parameters_1","text":"* (optional) title : str (optional) The title of the swagger documentation version : str (optional) The version of the exposed API description : Optional[str] The API description. Defaults to None. base_path : str The base path of the API. Defaults to ''. consumes : DictConsumes A map of media types and deserializers. Defaults to DEFAULT_CONSUMES. produces : DictProduces A map of media types and serializers. Defaults to DEFAULT_PRODUCES. tags : Optional[List[Mapping[str The available tags. Defaults to None. swagger_base_url : Optional[str] The base url for the swagger CDN. Defaults to DEFAULT_SWAGGER_BASE_URL. typeface_url : Optional[str] The base url for the typeface. Defaults to DEFAULT_TYPEFACE_URL. config : Optional[SwaggerConfig] The swagger configuration. Defaults to None. serializer_configs : Dict[bytes, jetblack_serialization.config.SerializerConfig] arg_serializer_config : SerializerConfig arg_deserializer_factory : Callable[[jetblack_serialization.config.SerializerConfigCallable[[strAnyAny]]","title":"Parameters"},{"location":"api/bareasgi_rest/#property-resthttprouternot_found_response","text":"","title":"property RestHttpRouter.not_found_response"},{"location":"api/bareasgi_rest/#summary_3","text":"The response when a handler could not be found for a method/path not_found_response -> Union[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]] not_found_response : Union[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]] = ...","title":"Summary"},{"location":"api/bareasgi_rest/#method-resthttprouteradd","text":"Module: bareasgi.basic_router.http_router Package: bareasgi.basic_router File: bareasgi/basic_router/http_router.py","title":"method RestHttpRouter.add"},{"location":"api/bareasgi_rest/#summary_4","text":"Add a handler RestHttpRouter . add ( methods : AbstractSet[str] , path : str , callback : CallableMapping[strAnyUnionMutableMapping[strAny], NoneTypeMapping[strAnyAsyncIterable[bytesAwaitableUnion[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]]]] )","title":"Summary"},{"location":"api/bareasgi_rest/#parameters_2","text":"methods : AbstractSet[str] (optional) The supported HTTP methods path : str (optional) The path callback : CallableMapping[strAnyUnionMutableMapping[strAny], NoneTypeMapping[strAnyAsyncIterable[bytesAwaitableUnion[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]]]] (optional) The request handler","title":"Parameters"},{"location":"api/bareasgi_rest/#returns_1","text":"Any :","title":"Returns"},{"location":"api/bareasgi_rest/#method-resthttprouteradd_rest","text":"Module: bareasgi_rest.rest_router Package: bareasgi_rest File: bareasgi_rest/rest_router.py","title":"method RestHttpRouter.add_rest"},{"location":"api/bareasgi_rest/#summary_5","text":"Register a callback to a method and path RestHttpRouter . add_rest ( methods : AbstractSet[str] , path : str , callback : RestCallback , * , consumes : List[bytes] , produces : List[bytes] , collection_format : str , tags : Optional[List[str]] , status_code : int , status_description : str , serializer_config : UnionDict[bytes, jetblack_serialization.config.SerializerConfig], NoneType] , arg_serializer_config : Union[jetblack_serialization.config.SerializerConfig, NoneType] , arg_deserializer_factory : UnionCallable[[jetblack_serialization.config.SerializerConfigCallable[[strAnyAny]], NoneType] )","title":"Summary"},{"location":"api/bareasgi_rest/#parameters_3","text":"methods : AbstractSet[str] (optional) The set of methods path : str (optional) The path callback : RestCallback (optional) The callback * (optional) consumes : List[bytes] The content media type. Defaults to b'application/json'. produces : List[bytes] The accept media type. Defaults to b'application/json'. collection_format : str The format of repeated values. Defaults to DEFAULT_COLLECTION_FORMAT. tags : Optional[List[str]] A list of tags. Defaults to None. status_code : int The ok status code. Defaults to 200. status_description : str The ok status message. Defaults to 'OK'. serializer_config : UnionDict[bytes, jetblack_serialization.config.SerializerConfig], NoneType] arg_serializer_config : Union[jetblack_serialization.config.SerializerConfig, NoneType] arg_deserializer_factory : UnionCallable[[jetblack_serialization.config.SerializerConfigCallable[[strAnyAny]], NoneType]","title":"Parameters"},{"location":"api/bareasgi_rest/#returns_2","text":"Any :","title":"Returns"},{"location":"api/bareasgi_rest/#method-resthttprouteradd_route","text":"Module: bareasgi.basic_router.http_router Package: bareasgi.basic_router File: bareasgi/basic_router/http_router.py","title":"method RestHttpRouter.add_route"},{"location":"api/bareasgi_rest/#summary_6","text":"Add a route to a callback for a method and path definition RestHttpRouter . add_route ( method : str , path_definition : PathDefinition , callback : CallableMapping[strAnyUnionMutableMapping[strAny], NoneTypeMapping[strAnyAsyncIterable[bytesAwaitableUnion[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]]]] )","title":"Summary"},{"location":"api/bareasgi_rest/#parameters_4","text":"method : str (optional) The method path_definition : PathDefinition (optional) The path definition callback : CallableMapping[strAnyUnionMutableMapping[strAny], NoneTypeMapping[strAnyAsyncIterable[bytesAwaitableUnion[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]]]] (optional) The callback","title":"Parameters"},{"location":"api/bareasgi_rest/#returns_3","text":"Any :","title":"Returns"},{"location":"api/bareasgi_rest/#method-resthttprouterresolve","text":"Module: bareasgi.basic_router.http_router Package: bareasgi.basic_router File: bareasgi/basic_router/http_router.py","title":"method RestHttpRouter.resolve"},{"location":"api/bareasgi_rest/#summary_7","text":"Resolve a request to a handler with the route matches RestHttpRouter . resolve ( method : str , path : str )","title":"Summary"},{"location":"api/bareasgi_rest/#parameters_5","text":"method : str (optional) The HTTP method. path : str (optional) The path","title":"Parameters"},{"location":"api/bareasgi_rest/#returns_4","text":"TupleUnionCallableMapping[strAnyUnionMutableMapping[strAny], NoneTypeMapping[strAnyAsyncIterable[bytesAwaitableUnion[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]]]], NoneTypeUnionMapping[strAny], NoneType]] : A handler and the optional route matches.","title":"Returns"},{"location":"api/bareasgi_rest/#class-swaggerconfig","text":"Module: bareasgi_rest Package: bareasgi_rest.swagger File: bareasgi_rest/swagger/config.py","title":"class SwaggerConfig"},{"location":"api/bareasgi_rest/#summary_8","text":"The Swagger UI Configuration bareasgi_rest.swagger . SwaggerConfig ( validator_url : Optional[str] , supported_submit_methods : Optional[List[str]] , display_operation_id : bool , display_request_duration : bool , doc_expansion : str , oauth2 : Optional[SwaggerOauth2Config] , serialize_key : Callable[[str], str] , deserialize_key : Callable[[str], str] )","title":"Summary"},{"location":"api/bareasgi_rest/#parameters_6","text":"validator_url : Optional[str] The url of the validator, defaults to None supported_submit_methods : Optional[List[str]] The supported submit methods, defaults to None display_operation_id : bool Whether operation ids should be displayed, defaults to False display_request_duration : bool Whether the duration of the request should be displayed, defaults to False doc_expansion : str How the methods should be displayed, defaults to \"list\" oauth2 : Optional[SwaggerOauth2Config] Optional oauth2 config, defaults to None serialize_key : Callable[[str], str] The function to serialize keys deserialize_key : Callable[[str], str] The function to deserialize keys","title":"Parameters"},{"location":"api/bareasgi_rest/#class-swaggeroauth2config","text":"Module: bareasgi_rest Package: bareasgi_rest.swagger File: bareasgi_rest/swagger/config.py","title":"class SwaggerOauth2Config"},{"location":"api/bareasgi_rest/#summary_9","text":"Swagger Oauth2 config bareasgi_rest.swagger . SwaggerOauth2Config ( realm : str , app_name : str , redirect_url : str )","title":"Summary"},{"location":"api/bareasgi_rest/#parameters_7","text":"realm : str (optional) The realm app_name : str (optional) The application name redirect_url : str (optional) The redirect url","title":"Parameters"},{"location":"user-guide/installation/","text":"Installation The package can be install from pypi. It is currently pre-release so you will need the --pre flag. $ pip install --pre bareASGI-rest An ASGI server will be required to run the code. The examples below use uvicorn . $ pip install uvicorn","title":"Installation"},{"location":"user-guide/installation/#installation","text":"The package can be install from pypi. It is currently pre-release so you will need the --pre flag. $ pip install --pre bareASGI-rest An ASGI server will be required to run the code. The examples below use uvicorn . $ pip install uvicorn","title":"Installation"},{"location":"user-guide/usage/","text":"Usage The router provided by this package maps the arguments and types of request handlers. We will create a mock book repository. Creating typed dictionaries Here is the type of a book. We use TypedDict to allow automatic type discovery from datetime import datetime try : # Available in 3.8 from typing import TypedDict # type:ignore except : # Available in 3.7 from typing_extensions import TypedDict class Book ( TypedDict ): \"\"\"A Book Args: book_id (int): The book id title (str): The title author (str): The author published (datetime): The publication date \"\"\" book_id : int title : str author : str published : datetime Note: the docstring will be used to provide documentation for swagger. Creating the API Now we can build the API. from typing import Dict , List from urllib.error import HTTPError BOOKS : Dict [ int , Book ] = {} NEXT_ID : int = 0 async def get_books () -> List [ Book ]: \"\"\"Get all the books. This method gets all the books in the shop. Returns: List[Book]: All the books \"\"\" return list ( BOOKS . values ()) async def get_book ( book_id : int ) -> Book : \"\"\"Get a book for a given id Args: book_id (int): The id of the book Raises: HTTPError: 404, when a book is not found Returns: Book: The book \"\"\" if book_id not in BOOKS : raise HTTPError ( None , 404 , None , None , None ) return BOOKS [ book_id ] async def create_book ( author : str , title : str , published : datetime ) -> int : \"\"\"Add a book Args: author (str): The author title (str): The title published (datetime): The publication date Returns: int: The id of the new book \"\"\" NEXT_ID += 1 BOOKS [ NEXT_ID ] = Book ( book_id = NEXT_ID , title = title , author = author , published = published ) return NEXT_ID async def update_book ( book_id : int , author : str , title : str , published : datetime ) -> None : \"\"\"Update a book Args: book_id (int): The id of the book to update author (str): The new author title (str): The title published (datetime): The publication date Raises: HTTPError: 404, when a book is not found \"\"\" if book_id not in BOOKS : raise HTTPError ( None , 404 , None , None , None ) BOOKS [ book_id ][ 'title' ] = title BOOKS [ book_id ][ 'author' ] = author BOOKS [ book_id ][ 'published' ] = published We can see that errors are handler by raising HTTPError from the urllib.errors standard library package. A convention has been applied such that the status code MUST appear before the message, separated by a comma. Adding support for the REST router Now we must create our application and add support for the router. from bareasgi import Application from bareasgi_rest import RestHttpRouter , add_swagger_ui router = RestHttpRouter ( None , title = \"Books\" , version = \"1\" , description = \"A book api\" , base_path = '/api/1' , tags = [ { 'name' : 'Books' , 'description' : 'The book store API' } ] ) app = Application ( http_router = router ) add_swagger_ui ( app ) Note the base_path argument can be used to prefix all paths. The RestHttpRouter is a subclass of the basic router, so all those methods are also available. Creating the routes Now we can create the routes: tags = [ 'Books' ] router . add_rest ({ 'GET' }, '/books' , get_books , tags = tags ) router . add_rest ({ 'GET' }, '/books/{bookId:int}' , get_book , tags = tags ) router . add_rest ({ 'POST' }, '/books' , create_book , tags = tags , status_code = 201 ) router . add_rest ({ 'PUT' }, '/books/{bookId:int}' , update_book , tags = tags , status_code = 204 ) First we should note that the paths will be prefixed with the base_path provided to the router. Referring back to the implementation of get_book we can see that the camel-case path variable bookId has been mapped to the snake-case book_id parameter. The JSON object provided in the body of the create_book will similarly map camel-cased properties to the snake-cased function parameters. We can also see how the status codes have been overridden for the POST and PUT endpoints, and all the routes have the \"Books\" tag for grouping in the UI. Serving the API Finally we can serve the API: import uvicorn uvicorn . run ( app , port = 9009 ) Browsing to http://localhost/api/1/swagger we should see: When we expand GET /books/{bookId} we can see all the information provided in the docstring and typing has been passed through to the swagger UI.","title":"Usage"},{"location":"user-guide/usage/#usage","text":"The router provided by this package maps the arguments and types of request handlers. We will create a mock book repository.","title":"Usage"},{"location":"user-guide/usage/#creating-typed-dictionaries","text":"Here is the type of a book. We use TypedDict to allow automatic type discovery from datetime import datetime try : # Available in 3.8 from typing import TypedDict # type:ignore except : # Available in 3.7 from typing_extensions import TypedDict class Book ( TypedDict ): \"\"\"A Book Args: book_id (int): The book id title (str): The title author (str): The author published (datetime): The publication date \"\"\" book_id : int title : str author : str published : datetime Note: the docstring will be used to provide documentation for swagger.","title":"Creating typed dictionaries"},{"location":"user-guide/usage/#creating-the-api","text":"Now we can build the API. from typing import Dict , List from urllib.error import HTTPError BOOKS : Dict [ int , Book ] = {} NEXT_ID : int = 0 async def get_books () -> List [ Book ]: \"\"\"Get all the books. This method gets all the books in the shop. Returns: List[Book]: All the books \"\"\" return list ( BOOKS . values ()) async def get_book ( book_id : int ) -> Book : \"\"\"Get a book for a given id Args: book_id (int): The id of the book Raises: HTTPError: 404, when a book is not found Returns: Book: The book \"\"\" if book_id not in BOOKS : raise HTTPError ( None , 404 , None , None , None ) return BOOKS [ book_id ] async def create_book ( author : str , title : str , published : datetime ) -> int : \"\"\"Add a book Args: author (str): The author title (str): The title published (datetime): The publication date Returns: int: The id of the new book \"\"\" NEXT_ID += 1 BOOKS [ NEXT_ID ] = Book ( book_id = NEXT_ID , title = title , author = author , published = published ) return NEXT_ID async def update_book ( book_id : int , author : str , title : str , published : datetime ) -> None : \"\"\"Update a book Args: book_id (int): The id of the book to update author (str): The new author title (str): The title published (datetime): The publication date Raises: HTTPError: 404, when a book is not found \"\"\" if book_id not in BOOKS : raise HTTPError ( None , 404 , None , None , None ) BOOKS [ book_id ][ 'title' ] = title BOOKS [ book_id ][ 'author' ] = author BOOKS [ book_id ][ 'published' ] = published We can see that errors are handler by raising HTTPError from the urllib.errors standard library package. A convention has been applied such that the status code MUST appear before the message, separated by a comma.","title":"Creating the API"},{"location":"user-guide/usage/#adding-support-for-the-rest-router","text":"Now we must create our application and add support for the router. from bareasgi import Application from bareasgi_rest import RestHttpRouter , add_swagger_ui router = RestHttpRouter ( None , title = \"Books\" , version = \"1\" , description = \"A book api\" , base_path = '/api/1' , tags = [ { 'name' : 'Books' , 'description' : 'The book store API' } ] ) app = Application ( http_router = router ) add_swagger_ui ( app ) Note the base_path argument can be used to prefix all paths. The RestHttpRouter is a subclass of the basic router, so all those methods are also available.","title":"Adding support for the REST router"},{"location":"user-guide/usage/#creating-the-routes","text":"Now we can create the routes: tags = [ 'Books' ] router . add_rest ({ 'GET' }, '/books' , get_books , tags = tags ) router . add_rest ({ 'GET' }, '/books/{bookId:int}' , get_book , tags = tags ) router . add_rest ({ 'POST' }, '/books' , create_book , tags = tags , status_code = 201 ) router . add_rest ({ 'PUT' }, '/books/{bookId:int}' , update_book , tags = tags , status_code = 204 ) First we should note that the paths will be prefixed with the base_path provided to the router. Referring back to the implementation of get_book we can see that the camel-case path variable bookId has been mapped to the snake-case book_id parameter. The JSON object provided in the body of the create_book will similarly map camel-cased properties to the snake-cased function parameters. We can also see how the status codes have been overridden for the POST and PUT endpoints, and all the routes have the \"Books\" tag for grouping in the UI.","title":"Creating the routes"},{"location":"user-guide/usage/#serving-the-api","text":"Finally we can serve the API: import uvicorn uvicorn . run ( app , port = 9009 ) Browsing to http://localhost/api/1/swagger we should see: When we expand GET /books/{bookId} we can see all the information provided in the docstring and typing has been passed through to the swagger UI.","title":"Serving the API"}]}