{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 This package provides enhanced support for writing REST APIs with bareASGI . It includes: A router to simplify the creation of REST APIs, A swagger API endpoint This is a Python 3.7+ package, and is currently pre-release. Thanks \u00b6 Thanks to rr- and contributors for the excellent docstring-parser package.","title":"Welcome"},{"location":"#welcome","text":"This package provides enhanced support for writing REST APIs with bareASGI . It includes: A router to simplify the creation of REST APIs, A swagger API endpoint This is a Python 3.7+ package, and is currently pre-release.","title":"Welcome"},{"location":"#thanks","text":"Thanks to rr- and contributors for the excellent docstring-parser package.","title":"Thanks"},{"location":"api/bareasgi_rest/","text":"module bareasgi_rest \u00b6 Summary \u00b6 Enhanced REST support for bareASGI function bareasgi_rest . add_swagger_ui \u00b6 Summary \u00b6 Add the Swagger UI bareasgi_rest . add_swagger_ui ( app : Application ) -> Any Parameters \u00b6 app : Application The bareASGI application Returns \u00b6 Any : class RestHttpRouter ( BasicHttpRouter ) \u00b6 Summary \u00b6 Initialise the REST router Description \u00b6 Here is an example of how to use the router. from bareasgi import Application from bareasgi_rest import RestHttpRouter , add_swagger_ui router = RestHttpRouter ( None , title = \"Books\" , version = \"1\" , description = \"A book api\" , base_path = '/api/1' , tags = [ { 'name' : 'Books' , 'description' : 'The book store API' } ] ) app = Application ( http_router = router ) add_swagger_ui ( app ) bareasgi_rest . RestHttpRouter ( not_found_response : HttpResponse , * , title : str , version : str , description : Optional[str] , base_path : str , consumes : DictConsumes , produces : DictProduces , tags : Optional[List[Mapping[str, Any]]] , swagger_base_url : Optional[str] , typeface_url : Optional[str] , config : Optional[SwaggerConfig] , serializer_configs : DictSerializerConfig , arg_serializer_config : SerializerConfig , arg_deserializer_factory : ArgDeserializerFactory ) -> None Parameters \u00b6 not_found_response : HttpResponse The response sent when a route is not found title : str The title of the swagger documentation version : str The version of the exposed API description : Optional[str] (optional) The API description. Defaults to None. base_path : str (optional) The base path of the API. Defaults to ''. consumes : DictConsumes (optional) A map of media types and deserializers. Defaults to DEFAULT_CONSUMES. produces : DictProduces (optional) A map of media types and serializers. Defaults to DEFAULT_PRODUCES. tags : Optional[List[Mapping[str, Any]]] (optional) The available tags. Defaults to None. swagger_base_url : Optional[str] (optional) The base url for the swagger CDN. Defaults to DEFAULT_SWAGGER_BASE_URL. typeface_url : Optional[str] (optional) The base url for the typeface. Defaults to DEFAULT_TYPEFACE_URL. config : Optional[SwaggerConfig] (optional) The swagger configuration. Defaults to None. serializer_configs : DictSerializerConfig (optional) The serializer configuration for content. Defaults to DEFAULT_SERIALIZER_CONFIG. arg_serializer_config : SerializerConfig (optional) The serializer configuration for arguments. Defaults to DEFAULT_JSON_SERIALIZER_CONFIG. arg_deserializer_factory : ArgDeserializerFactory (optional) The deserializer configuration for arguments. Defaults to DEFAULT_ARG_DESERIALIZER_FACTORY. property RestHttpRouter . not_found_response \u00b6 Summary \u00b6 The response when a handler could not be found for a method/path not_found_response -> HttpResponse not_found_response : HttpResponse = ... method RestHttpRouter . add \u00b6 Summary \u00b6 Add an HTTP request handler RestHttpRouter . add ( methods : AbstractSet[str] , path : str , callback : HttpRequestCallback ) -> Any Parameters \u00b6 methods : AbstractSet[str] The supported HTTP methods. path : str The path. callback : HttpRequestCallback The request handler. Returns \u00b6 Any : method RestHttpRouter . add_rest \u00b6 Summary \u00b6 Register a callback to a method and path RestHttpRouter . add_rest ( methods : AbstractSet[str] , path : str , callback : RestCallback , * , consumes : List[bytes] , produces : List[bytes] , collection_format : str , tags : Optional[List[str]] , status_code : int , status_description : str , serializer_config : UnionDict[bytes, jetblack_serialization.config.SerializerConfig], NoneType] , arg_serializer_config : Union[jetblack_serialization.config.SerializerConfig, NoneType] , arg_deserializer_factory : UnionCallable[[jetblack_serialization.config.SerializerConfigCallable[[strAnyAny]], NoneType] ) -> Any Parameters \u00b6 methods : AbstractSet[str] The set of methods path : str The path callback : RestCallback The callback consumes : List[bytes] (optional) The content media type. Defaults to b'application/json'. produces : List[bytes] (optional) The accept media type. Defaults to b'application/json'. collection_format : str (optional) The format of repeated values. Defaults to DEFAULT_COLLECTION_FORMAT. tags : Optional[List[str]] (optional) A list of tags. Defaults to None. status_code : int (optional) The ok status code. Defaults to 200. status_description : str (optional) The ok status message. Defaults to 'OK'. serializer_config : UnionDict[bytes, jetblack_serialization.config.SerializerConfig], NoneType] (optional) arg_serializer_config : Union[jetblack_serialization.config.SerializerConfig, NoneType] (optional) arg_deserializer_factory : UnionCallable[[jetblack_serialization.config.SerializerConfigCallable[[strAnyAny]], NoneType] (optional) Returns \u00b6 Any : method RestHttpRouter . add_route \u00b6 Summary \u00b6 Add a route to a callback for a method and path definition RestHttpRouter . add_route ( method : str , path_definition : PathDefinition , callback : CallableMapping[strAnyUnionMutableMapping[strAny], NoneTypeMapping[strAnyAsyncIterable[bytesAwaitableUnion[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]]]] ) -> Any Parameters \u00b6 method : str The method path_definition : PathDefinition The path definition callback : CallableMapping[strAnyUnionMutableMapping[strAny], NoneTypeMapping[strAnyAsyncIterable[bytesAwaitableUnion[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]]]] The callback Returns \u00b6 Any : method RestHttpRouter . resolve \u00b6 Summary \u00b6 Resolve a request to a handler with the route matches RestHttpRouter . resolve ( method : str , path : str ) -> Tuple[Optional[HttpRequestCallback], Optional[RouteMatches]] Parameters \u00b6 method : str The HTTP method. path : str The path. Returns \u00b6 Tuple[Optional[HttpRequestCallback], Optional[RouteMatches]] : A handler and the optional route matches. class SwaggerConfig \u00b6 Summary \u00b6 The Swagger UI Configuration bareasgi_rest.swagger . SwaggerConfig ( title : str , validator_url : Optional[str] , supported_submit_methods : Optional[List[str]] , display_operation_id : bool , display_request_duration : bool , doc_expansion : str , oauth2 : Optional[SwaggerOauth2Config] , serialize_key : Callable[[str], str] , deserialize_key : Callable[[str], str] ) -> None Parameters \u00b6 title : str (optional) The page title, defaults to \"The REST API\" validator_url : Optional[str] (optional) The url of the validator, defaults to None supported_submit_methods : Optional[List[str]] (optional) The supported submit methods, defaults to None display_operation_id : bool (optional) Whether operation ids should be displayed, defaults to False display_request_duration : bool (optional) Whether the duration of the request should be displayed, defaults to False doc_expansion : str (optional) How the methods should be displayed, defaults to \"list\" oauth2 : Optional[SwaggerOauth2Config] (optional) Optional oauth2 config, defaults to None serialize_key : Callable[[str], str] (optional) The function to serialize keys deserialize_key : Callable[[str], str] (optional) The function to deserialize keys class SwaggerOauth2Config \u00b6 Summary \u00b6 Swagger Oauth2 config bareasgi_rest.swagger . SwaggerOauth2Config ( client_id : str , realm : str , app_name : str , redirect_url : str ) -> None Parameters \u00b6 client_id : str The client id realm : str The realm app_name : str The application name redirect_url : str The redirect url","title":"bareasgi_rest"},{"location":"api/bareasgi_rest/#module-bareasgi_rest","text":"","title":"module bareasgi_rest"},{"location":"api/bareasgi_rest/#summary","text":"Enhanced REST support for bareASGI","title":"Summary"},{"location":"api/bareasgi_rest/#function-bareasgi_restadd_swagger_ui","text":"","title":"function bareasgi_rest.add_swagger_ui"},{"location":"api/bareasgi_rest/#summary_1","text":"Add the Swagger UI bareasgi_rest . add_swagger_ui ( app : Application ) -> Any","title":"Summary"},{"location":"api/bareasgi_rest/#parameters","text":"app : Application The bareASGI application","title":"Parameters"},{"location":"api/bareasgi_rest/#returns","text":"Any :","title":"Returns"},{"location":"api/bareasgi_rest/#class-resthttprouterbasichttprouter","text":"","title":"class RestHttpRouter(BasicHttpRouter)"},{"location":"api/bareasgi_rest/#summary_2","text":"Initialise the REST router","title":"Summary"},{"location":"api/bareasgi_rest/#description","text":"Here is an example of how to use the router. from bareasgi import Application from bareasgi_rest import RestHttpRouter , add_swagger_ui router = RestHttpRouter ( None , title = \"Books\" , version = \"1\" , description = \"A book api\" , base_path = '/api/1' , tags = [ { 'name' : 'Books' , 'description' : 'The book store API' } ] ) app = Application ( http_router = router ) add_swagger_ui ( app ) bareasgi_rest . RestHttpRouter ( not_found_response : HttpResponse , * , title : str , version : str , description : Optional[str] , base_path : str , consumes : DictConsumes , produces : DictProduces , tags : Optional[List[Mapping[str, Any]]] , swagger_base_url : Optional[str] , typeface_url : Optional[str] , config : Optional[SwaggerConfig] , serializer_configs : DictSerializerConfig , arg_serializer_config : SerializerConfig , arg_deserializer_factory : ArgDeserializerFactory ) -> None","title":"Description"},{"location":"api/bareasgi_rest/#parameters_1","text":"not_found_response : HttpResponse The response sent when a route is not found title : str The title of the swagger documentation version : str The version of the exposed API description : Optional[str] (optional) The API description. Defaults to None. base_path : str (optional) The base path of the API. Defaults to ''. consumes : DictConsumes (optional) A map of media types and deserializers. Defaults to DEFAULT_CONSUMES. produces : DictProduces (optional) A map of media types and serializers. Defaults to DEFAULT_PRODUCES. tags : Optional[List[Mapping[str, Any]]] (optional) The available tags. Defaults to None. swagger_base_url : Optional[str] (optional) The base url for the swagger CDN. Defaults to DEFAULT_SWAGGER_BASE_URL. typeface_url : Optional[str] (optional) The base url for the typeface. Defaults to DEFAULT_TYPEFACE_URL. config : Optional[SwaggerConfig] (optional) The swagger configuration. Defaults to None. serializer_configs : DictSerializerConfig (optional) The serializer configuration for content. Defaults to DEFAULT_SERIALIZER_CONFIG. arg_serializer_config : SerializerConfig (optional) The serializer configuration for arguments. Defaults to DEFAULT_JSON_SERIALIZER_CONFIG. arg_deserializer_factory : ArgDeserializerFactory (optional) The deserializer configuration for arguments. Defaults to DEFAULT_ARG_DESERIALIZER_FACTORY.","title":"Parameters"},{"location":"api/bareasgi_rest/#property-resthttprouternot_found_response","text":"","title":"property RestHttpRouter.not_found_response"},{"location":"api/bareasgi_rest/#summary_3","text":"The response when a handler could not be found for a method/path not_found_response -> HttpResponse not_found_response : HttpResponse = ...","title":"Summary"},{"location":"api/bareasgi_rest/#method-resthttprouteradd","text":"","title":"method RestHttpRouter.add"},{"location":"api/bareasgi_rest/#summary_4","text":"Add an HTTP request handler RestHttpRouter . add ( methods : AbstractSet[str] , path : str , callback : HttpRequestCallback ) -> Any","title":"Summary"},{"location":"api/bareasgi_rest/#parameters_2","text":"methods : AbstractSet[str] The supported HTTP methods. path : str The path. callback : HttpRequestCallback The request handler.","title":"Parameters"},{"location":"api/bareasgi_rest/#returns_1","text":"Any :","title":"Returns"},{"location":"api/bareasgi_rest/#method-resthttprouteradd_rest","text":"","title":"method RestHttpRouter.add_rest"},{"location":"api/bareasgi_rest/#summary_5","text":"Register a callback to a method and path RestHttpRouter . add_rest ( methods : AbstractSet[str] , path : str , callback : RestCallback , * , consumes : List[bytes] , produces : List[bytes] , collection_format : str , tags : Optional[List[str]] , status_code : int , status_description : str , serializer_config : UnionDict[bytes, jetblack_serialization.config.SerializerConfig], NoneType] , arg_serializer_config : Union[jetblack_serialization.config.SerializerConfig, NoneType] , arg_deserializer_factory : UnionCallable[[jetblack_serialization.config.SerializerConfigCallable[[strAnyAny]], NoneType] ) -> Any","title":"Summary"},{"location":"api/bareasgi_rest/#parameters_3","text":"methods : AbstractSet[str] The set of methods path : str The path callback : RestCallback The callback consumes : List[bytes] (optional) The content media type. Defaults to b'application/json'. produces : List[bytes] (optional) The accept media type. Defaults to b'application/json'. collection_format : str (optional) The format of repeated values. Defaults to DEFAULT_COLLECTION_FORMAT. tags : Optional[List[str]] (optional) A list of tags. Defaults to None. status_code : int (optional) The ok status code. Defaults to 200. status_description : str (optional) The ok status message. Defaults to 'OK'. serializer_config : UnionDict[bytes, jetblack_serialization.config.SerializerConfig], NoneType] (optional) arg_serializer_config : Union[jetblack_serialization.config.SerializerConfig, NoneType] (optional) arg_deserializer_factory : UnionCallable[[jetblack_serialization.config.SerializerConfigCallable[[strAnyAny]], NoneType] (optional)","title":"Parameters"},{"location":"api/bareasgi_rest/#returns_2","text":"Any :","title":"Returns"},{"location":"api/bareasgi_rest/#method-resthttprouteradd_route","text":"","title":"method RestHttpRouter.add_route"},{"location":"api/bareasgi_rest/#summary_6","text":"Add a route to a callback for a method and path definition RestHttpRouter . add_route ( method : str , path_definition : PathDefinition , callback : CallableMapping[strAnyUnionMutableMapping[strAny], NoneTypeMapping[strAnyAsyncIterable[bytesAwaitableUnion[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]]]] ) -> Any","title":"Summary"},{"location":"api/bareasgi_rest/#parameters_4","text":"method : str The method path_definition : PathDefinition The path definition callback : CallableMapping[strAnyUnionMutableMapping[strAny], NoneTypeMapping[strAnyAsyncIterable[bytesAwaitableUnion[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]]]] The callback","title":"Parameters"},{"location":"api/bareasgi_rest/#returns_3","text":"Any :","title":"Returns"},{"location":"api/bareasgi_rest/#method-resthttprouterresolve","text":"","title":"method RestHttpRouter.resolve"},{"location":"api/bareasgi_rest/#summary_7","text":"Resolve a request to a handler with the route matches RestHttpRouter . resolve ( method : str , path : str ) -> Tuple[Optional[HttpRequestCallback], Optional[RouteMatches]]","title":"Summary"},{"location":"api/bareasgi_rest/#parameters_5","text":"method : str The HTTP method. path : str The path.","title":"Parameters"},{"location":"api/bareasgi_rest/#returns_4","text":"Tuple[Optional[HttpRequestCallback], Optional[RouteMatches]] : A handler and the optional route matches.","title":"Returns"},{"location":"api/bareasgi_rest/#class-swaggerconfig","text":"","title":"class SwaggerConfig"},{"location":"api/bareasgi_rest/#summary_8","text":"The Swagger UI Configuration bareasgi_rest.swagger . SwaggerConfig ( title : str , validator_url : Optional[str] , supported_submit_methods : Optional[List[str]] , display_operation_id : bool , display_request_duration : bool , doc_expansion : str , oauth2 : Optional[SwaggerOauth2Config] , serialize_key : Callable[[str], str] , deserialize_key : Callable[[str], str] ) -> None","title":"Summary"},{"location":"api/bareasgi_rest/#parameters_6","text":"title : str (optional) The page title, defaults to \"The REST API\" validator_url : Optional[str] (optional) The url of the validator, defaults to None supported_submit_methods : Optional[List[str]] (optional) The supported submit methods, defaults to None display_operation_id : bool (optional) Whether operation ids should be displayed, defaults to False display_request_duration : bool (optional) Whether the duration of the request should be displayed, defaults to False doc_expansion : str (optional) How the methods should be displayed, defaults to \"list\" oauth2 : Optional[SwaggerOauth2Config] (optional) Optional oauth2 config, defaults to None serialize_key : Callable[[str], str] (optional) The function to serialize keys deserialize_key : Callable[[str], str] (optional) The function to deserialize keys","title":"Parameters"},{"location":"api/bareasgi_rest/#class-swaggeroauth2config","text":"","title":"class SwaggerOauth2Config"},{"location":"api/bareasgi_rest/#summary_9","text":"Swagger Oauth2 config bareasgi_rest.swagger . SwaggerOauth2Config ( client_id : str , realm : str , app_name : str , redirect_url : str ) -> None","title":"Summary"},{"location":"api/bareasgi_rest/#parameters_7","text":"client_id : str The client id realm : str The realm app_name : str The application name redirect_url : str The redirect url","title":"Parameters"},{"location":"user-guide/getting-started/","text":"Getting Started \u00b6 The router provided by this package maps the arguments and types of request handlers. We will create a mock book repository. Creating typed dictionaries \u00b6 Here is the type of a book. We use TypedDict to allow automatic type discovery from datetime import datetime try : # Available in 3.8 from typing import TypedDict # type:ignore except : # Available in 3.7 from typing_extensions import TypedDict class Book ( TypedDict ): \"\"\"A Book Args: book_id (int): The book id title (str): The title author (str): The author published (datetime): The publication date \"\"\" book_id : int title : str author : str published : datetime Note: the docstring will be used to provide documentation for swagger. Creating the API \u00b6 Now we can build the API. from typing import Dict , List from urllib.error import HTTPError BOOKS : Dict [ int , Book ] = {} NEXT_ID : int = 0 async def get_books () -> List [ Book ]: \"\"\"Get all the books. This method gets all the books in the shop. Returns: List[Book]: All the books \"\"\" return list ( BOOKS . values ()) async def get_book ( book_id : int ) -> Book : \"\"\"Get a book for a given id Args: book_id (int): The id of the book Raises: HTTPError: 404, when a book is not found Returns: Book: The book \"\"\" if book_id not in BOOKS : raise HTTPError ( None , 404 , None , None , None ) return BOOKS [ book_id ] async def create_book ( author : str , title : str , published : datetime ) -> int : \"\"\"Add a book Args: author (str): The author title (str): The title published (datetime): The publication date Returns: int: The id of the new book \"\"\" NEXT_ID += 1 BOOKS [ NEXT_ID ] = Book ( book_id = NEXT_ID , title = title , author = author , published = published ) return NEXT_ID async def update_book ( book_id : int , author : str , title : str , published : datetime ) -> None : \"\"\"Update a book Args: book_id (int): The id of the book to update author (str): The new author title (str): The title published (datetime): The publication date Raises: HTTPError: 404, when a book is not found \"\"\" if book_id not in BOOKS : raise HTTPError ( None , 404 , None , None , None ) BOOKS [ book_id ][ 'title' ] = title BOOKS [ book_id ][ 'author' ] = author BOOKS [ book_id ][ 'published' ] = published We can see that errors are handler by raising HTTPError from the urllib.errors standard library package. A convention has been applied such that the status code MUST appear before the message, separated by a comma. Adding support for the REST router \u00b6 Now we must create our application and add support for the router. from bareasgi import Application from bareasgi_rest import RestHttpRouter , add_swagger_ui router = RestHttpRouter ( None , title = \"Books\" , version = \"1\" , description = \"A book api\" , base_path = '/api/1' , tags = [ { 'name' : 'Books' , 'description' : 'The book store API' } ] ) app = Application ( http_router = router ) add_swagger_ui ( app ) Note the base_path argument can be used to prefix all paths. The RestHttpRouter is a subclass of the basic router, so all those methods are also available. Creating the routes \u00b6 Now we can create the routes: tags = [ 'Books' ] router . add_rest ({ 'GET' }, '/books' , get_books , tags = tags ) router . add_rest ({ 'GET' }, '/books/{bookId:int}' , get_book , tags = tags ) router . add_rest ({ 'POST' }, '/books' , create_book , tags = tags , status_code = 201 ) router . add_rest ({ 'PUT' }, '/books/{bookId:int}' , update_book , tags = tags , status_code = 204 ) First we should note that the paths will be prefixed with the base_path provided to the router. Referring back to the implementation of get_book we can see that the camel-case path variable bookId has been mapped to the snake-case book_id parameter. The JSON object provided in the body of the create_book will similarly map camel-cased properties to the snake-cased function parameters. We can also see how the status codes have been overridden for the POST and PUT endpoints, and all the routes have the \"Books\" tag for grouping in the UI. Serving the API \u00b6 Finally we can serve the API: import uvicorn uvicorn . run ( app , port = 9009 ) Browsing to http://localhost/api/1/swagger we should see: When we expand GET /books/{bookId} we can see all the information provided in the docstring and typing has been passed through to the swagger UI.","title":"Getting Started"},{"location":"user-guide/getting-started/#getting-started","text":"The router provided by this package maps the arguments and types of request handlers. We will create a mock book repository.","title":"Getting Started"},{"location":"user-guide/getting-started/#creating-typed-dictionaries","text":"Here is the type of a book. We use TypedDict to allow automatic type discovery from datetime import datetime try : # Available in 3.8 from typing import TypedDict # type:ignore except : # Available in 3.7 from typing_extensions import TypedDict class Book ( TypedDict ): \"\"\"A Book Args: book_id (int): The book id title (str): The title author (str): The author published (datetime): The publication date \"\"\" book_id : int title : str author : str published : datetime Note: the docstring will be used to provide documentation for swagger.","title":"Creating typed dictionaries"},{"location":"user-guide/getting-started/#creating-the-api","text":"Now we can build the API. from typing import Dict , List from urllib.error import HTTPError BOOKS : Dict [ int , Book ] = {} NEXT_ID : int = 0 async def get_books () -> List [ Book ]: \"\"\"Get all the books. This method gets all the books in the shop. Returns: List[Book]: All the books \"\"\" return list ( BOOKS . values ()) async def get_book ( book_id : int ) -> Book : \"\"\"Get a book for a given id Args: book_id (int): The id of the book Raises: HTTPError: 404, when a book is not found Returns: Book: The book \"\"\" if book_id not in BOOKS : raise HTTPError ( None , 404 , None , None , None ) return BOOKS [ book_id ] async def create_book ( author : str , title : str , published : datetime ) -> int : \"\"\"Add a book Args: author (str): The author title (str): The title published (datetime): The publication date Returns: int: The id of the new book \"\"\" NEXT_ID += 1 BOOKS [ NEXT_ID ] = Book ( book_id = NEXT_ID , title = title , author = author , published = published ) return NEXT_ID async def update_book ( book_id : int , author : str , title : str , published : datetime ) -> None : \"\"\"Update a book Args: book_id (int): The id of the book to update author (str): The new author title (str): The title published (datetime): The publication date Raises: HTTPError: 404, when a book is not found \"\"\" if book_id not in BOOKS : raise HTTPError ( None , 404 , None , None , None ) BOOKS [ book_id ][ 'title' ] = title BOOKS [ book_id ][ 'author' ] = author BOOKS [ book_id ][ 'published' ] = published We can see that errors are handler by raising HTTPError from the urllib.errors standard library package. A convention has been applied such that the status code MUST appear before the message, separated by a comma.","title":"Creating the API"},{"location":"user-guide/getting-started/#adding-support-for-the-rest-router","text":"Now we must create our application and add support for the router. from bareasgi import Application from bareasgi_rest import RestHttpRouter , add_swagger_ui router = RestHttpRouter ( None , title = \"Books\" , version = \"1\" , description = \"A book api\" , base_path = '/api/1' , tags = [ { 'name' : 'Books' , 'description' : 'The book store API' } ] ) app = Application ( http_router = router ) add_swagger_ui ( app ) Note the base_path argument can be used to prefix all paths. The RestHttpRouter is a subclass of the basic router, so all those methods are also available.","title":"Adding support for the REST router"},{"location":"user-guide/getting-started/#creating-the-routes","text":"Now we can create the routes: tags = [ 'Books' ] router . add_rest ({ 'GET' }, '/books' , get_books , tags = tags ) router . add_rest ({ 'GET' }, '/books/{bookId:int}' , get_book , tags = tags ) router . add_rest ({ 'POST' }, '/books' , create_book , tags = tags , status_code = 201 ) router . add_rest ({ 'PUT' }, '/books/{bookId:int}' , update_book , tags = tags , status_code = 204 ) First we should note that the paths will be prefixed with the base_path provided to the router. Referring back to the implementation of get_book we can see that the camel-case path variable bookId has been mapped to the snake-case book_id parameter. The JSON object provided in the body of the create_book will similarly map camel-cased properties to the snake-cased function parameters. We can also see how the status codes have been overridden for the POST and PUT endpoints, and all the routes have the \"Books\" tag for grouping in the UI.","title":"Creating the routes"},{"location":"user-guide/getting-started/#serving-the-api","text":"Finally we can serve the API: import uvicorn uvicorn . run ( app , port = 9009 ) Browsing to http://localhost/api/1/swagger we should see: When we expand GET /books/{bookId} we can see all the information provided in the docstring and typing has been passed through to the swagger UI.","title":"Serving the API"},{"location":"user-guide/installation/","text":"Installation \u00b6 The package can be install from pypi. It is currently pre-release so you will need the --pre flag. $ pip install --pre bareASGI-rest An ASGI server will be required to run the code. The examples below use uvicorn . $ pip install uvicorn","title":"Installation"},{"location":"user-guide/installation/#installation","text":"The package can be install from pypi. It is currently pre-release so you will need the --pre flag. $ pip install --pre bareASGI-rest An ASGI server will be required to run the code. The examples below use uvicorn . $ pip install uvicorn","title":"Installation"}]}